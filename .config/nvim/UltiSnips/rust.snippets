snippet thread
fn main() {
    std::thread::Builder::new()
        .stack_size(1 << 23)
        .spawn(_main)
        .unwrap()
        .join()
        .unwrap();
}
endsnippet

snippet main
fn main() -> io::Result<()> {
    let mut scan = Scan::new();
    $0
    Ok(())
}
endsnippet

snippet solve1
fn solve1(scan: &mut Scan) -> io::Result<()> {
    $0
    Ok(())
}

fn main() -> io::Result<()> {
    let mut scan = Scan::new();
    let ts: usize = scan.next();
    for _ in 0..ts {
        solve1(&mut scan)?;
    }
    Ok(())
}
endsnippet

snippet Scan
use std::collections::VecDeque;
use std::io;

struct Scan {
    buffer: VecDeque<String>,
}

impl Scan {
    fn new() -> Scan {
        Scan {
            buffer: VecDeque::new(),
        }
    }

    fn next_line(&self) -> io::Result<String> {
        let mut line = String::new();
        match io::stdin().read_line(&mut line)? {
            0 => Err(io::Error::new(io::ErrorKind::Other, "EOF")),
            _ => Ok(line),
        }
    }

    fn next<T: std::str::FromStr>(&mut self) -> T {
        loop {
            if let Some(token) = self.buffer.pop_front() {
                match token.parse() {
                    Ok(x) => {
                        return x;
                    }
                    _ => {
                        panic!("parse");
                    }
                }
            }
            let line = self.next_line().unwrap();
            self.buffer = line.split_whitespace().map(String::from).collect();
        }
    }
}
endsnippet

snippet next_n
(0..$1).map(|_| scan.next()).collect()
endsnippet

snippet factorial
fn factorial(x: usize) -> usize {
    let mut result: usize = 1;
    for i in 1..=x {
        result *= i;
    }
    result
}
endsnippet

snippet Uf
struct Uf {
    count: Vec<usize>,
    parent: Vec<usize>,
}

impl Uf {
    fn new(size: usize) -> Uf {
        Uf {
            count: vec![1usize; size],
            parent: (0..size).collect(),
        }
    }

    fn root(&self, a: usize) -> usize {
        let mut current = a;
        while self.parent[current] != current {
            current = self.parent[current];
        }
        current
    }

    fn connected(&self, a: usize, b: usize) -> bool {
        return self.root(a) == self.root(b);
    }

    fn connect(&mut self, a: usize, b: usize) {
        let ra = self.root(a);
        let rb = self.root(b);
        if ra == rb {
            return;
        }
        if self.count[ra] > self.count[rb] {
            self.parent[rb] = ra;
            self.count[ra] += self.count[rb];
        } else {
            self.parent[ra] = rb;
            self.count[rb] += self.count[ra];
        }
    }
}
endsnippet

snippet #[derive(Ord
#[Derive(Ord, Eq, PartialOrd, PartialEq)]
endsnippet

snippet .u "unwrap" i
.unwrap()$0
endsnippet
