#!/usr/bin/env bash

# walogram - generate telegram-desktop themes
# based on generated by wal or user defined colors

# originally written by Guillaume Boehm <guillaumeboehm@hotmail.fr> in 2021
# rewritten by Zubarev Grigoriy <thirtysix@thirtysix.pw> in 2023
# this program is provided free of charge and without warranty

scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cachedir="${XDG_CACHE_HOME:-$HOME/.cache}/walogram"
themename="wal.tdesktop-theme"
constants="$scriptdir/constants.tdesktop-theme"

msg() {
	printf "[1;34m ::[0m %s\\n" "$@"
}

error() {
	printf "[1;31m ::[0m %s\\n" "$@" >&2
	exit 1
}

gencolors() {
	colors="0 1 2 3 4 5 7 8 9 10 11 12 13 14 15"
	divisions="10 20 30 40 50 60 70 80 90"
	alphas="00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee"

	for i in $colors; do
		color="color$i"
		c_rgb_12d=$((0x"${!color:1:2}"))
		c_rgb_34d=$((0x"${!color:3:2}"))
		c_rgb_56d=$((0x"${!color:5:2}"))

		for division in $divisions; do
			# lighter variants
			c_r=$((c_rgb_12d + (c_rgb_12d * (division / 10) / 10)))
			c_g=$((c_rgb_34d + (c_rgb_34d * (division / 10) / 10)))
			c_b=$((c_rgb_56d + (c_rgb_56d * (division / 10) / 10)))
			[ "$c_r" -ge 255 ] && c_r=255
			[ "$c_g" -ge 255 ] && c_g=255
			[ "$c_b" -ge 255 ] && c_b=255
			c_hex_r="$(printf "%x" "$c_r")"
			c_hex_g="$(printf "%x" "$c_g")"
			c_hex_b="$(printf "%x" "$c_b")"
			[ "${#c_hex_r}" -eq 1 ] && c_hex_r="0${c_hex_r}"
			[ "${#c_hex_g}" -eq 1 ] && c_hex_g="0${c_hex_g}"
			[ "${#c_hex_b}" -eq 1 ] && c_hex_b="0${c_hex_b}"
			c_hex="#${c_hex_r}${c_hex_g}${c_hex_b}"
			eval "color${i}_lighter_${division}=${c_hex}"

			# darker variants
			c_r=$((c_rgb_12d - (c_rgb_12d * (division / 10) / 10)))
			c_g=$((c_rgb_34d - (c_rgb_34d * (division / 10) / 10)))
			c_b=$((c_rgb_56d - (c_rgb_56d * (division / 10) / 10)))
			c_hex_r="$(printf "%x" "$c_r")"
			c_hex_g="$(printf "%x" "$c_g")"
			c_hex_b="$(printf "%x" "$c_b")"
			[ "${#c_hex_r}" -eq 1 ] && c_hex_r="0${c_hex_r}"
			[ "${#c_hex_g}" -eq 1 ] && c_hex_g="0${c_hex_g}"
			[ "${#c_hex_b}" -eq 1 ] && c_hex_b="0${c_hex_b}"
			c_hex="#${c_hex_r}${c_hex_g}${c_hex_b}"
			eval "color${i}_darker_${division}=${c_hex}"
		done
	done

	for i in $colors; do
		echo "// color$i: original"
		echo "color$i: $(eval "echo \"\$color${i}\"");"

		echo "// color$i: lighter and darker variants"
		for division in $divisions; do
			echo "colorLighter${i}_${division}: $(eval "echo \"\$color${i}_lighter_${division}\"");"
			echo "colorDarker${i}_${division}: $(eval "echo \"\$color${i}_darker_${division}\"");"
		done

		echo "// color$i: alpha variants"
		for alpha in $alphas; do
			echo "colorAlpha${i}_${alpha}: $(eval "echo \"\${color${i}}${alpha}\"");"
		done
		printf "\\n"
	done
}

gentheme() {
	walname="background.jpg"
	tempdir="$(mktemp -d)"
	trap 'rm -rf "$tempdir"; exit 0' INT TERM EXIT

	gencolors | cat - "$constants" >"$tempdir/colors.tdesktop-theme"

	if command -v zip >/dev/null 2>&1; then
		if [ "$walmode" = "solid" ]; then
			# $background is set by wal in colors.sh template
			convert -size 256x256 "xc:${bgcolor:-${background:-$color0}}" "$tempdir/$walname"
		else
			case "$(file -b --mime-type "$wal")" in
			image/*) convert ${blur:+-blur 0x16} -resize 1920x1080 "$wal" "$tempdir/$walname" ;;
			*) error "not an image: $wal" ;;
			esac
		fi
		# syncing files (with '-FS') in an existing archive is faster than creating new
		zip -jq -FS "$cachedir/$themename" "$tempdir"/*
	else
		msg "'zip' not found. theme generated without background image"
		cp -f "$tempdir/colors.tdesktop-theme" "$cachedir/$themename"
	fi
}

main() {
	walmode="background"
	theme="${XDG_CACHE_HOME:-$HOME/.cache}/wal/colors.sh"
	read -r wal <"${XDG_CACHE_HOME:-$HOME/.cache}/wal/wal"

	while getopts ":vhi:f:b:Bcs" opt; do
		case "$opt" in
		v)
			printf "walogram-VERSION\\n"
			exit 0
			;;
		h)
			man walogram || error "could not open man page"
			exit 0
			;;
		b)
			printf "%s" "$OPTARG" | grep -Eq "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$" || error "not a valid color code: $OPTARG"
			bgcolor="$OPTARG"
			walmode="solid"
			;;
		i) wal="$OPTARG" ;;
		f) theme="$OPTARG" ;;
		B) blur="true" ;;
		c) rm -f "$cachedir"/* && msg "cache cleared" ;;
		s) walmode="solid" ;;
		:) error "'-$OPTARG' requires argument" ;;
		\?) error "invalid option: '-$OPTARG'" ;;
		esac
	done

	[ ! -f "$theme" ] && error "theme not found: $theme"
	[ ! -f "$wal" ] && error "background image not found: $wal"

	# shellcheck source=/dev/null
	. "$theme" >/dev/null 2>&1
	msg "colors loaded: $theme"

	# ensure all 16 colors are set
	for i in 0 1 2 3 4 5 6 7; do
		normal="color$i"
		bright="color$((i + 8))"
		[ -z "$(eval "echo \"\$$normal\"")" ] && error "$normal value is missing"
		[ -z "$(eval "echo \"\$$bright\"")" ] && {
			msg "$normal value used for $bright, because it is unset"
			eval "$bright=\$$normal"
		}
	done

	gentheme && msg "theme generated: $themename"
}

[ ! -f "$constants" ] && error "constants file not found: $constants"
[ -e "$cachedir" ] && [ ! -d "$cachedir" ] && error "cache directory location already exists and is not a directory: $cachedir"
mkdir -p "$cachedir" || error "unable to create cache directory: $cachedir"
[ ! -d "${XDG_CACHE_HOME:-$HOME/.cache}/wal" ] && error "wal cache directory not found: ${XDG_CACHE_HOME:-$HOME/.cache}/wal"

if command -v magick >/dev/null 2>&1; then
	convert() { magick convert "$@"; }
elif ! command -v convert >/dev/null 2>&1; then
	error "'convert' from ImageMagick not found"
fi

main "$@"

# vim: ts=4 sw=4 noet ft=sh
