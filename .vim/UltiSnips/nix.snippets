snippet der
{pkgs ? import <nixpkgs> {}}:

with pkgs;
stdenv.mkDerivation rec {
  name = "$1";
  src = $2;
  buildInputs = [ $3 ];
}
endsnippet

snippet py
with import <nixpkgs> {};
with python3.pkgs;
buildPythonPackage  rec {
  name = "$1";
  version = "0.1";
  src = ./src;
  propagatedBuildInputs = [ $2 ];
}
endsnippet

snippet venv
with import <nixpkgs> {};

mkShell {
  buildInputs = [
    (python38.withPackages (pp: [
      pp.setuptools
      pp.pip
      $1
    ]))
  ];
  shellHook = ''
    alias pip="PIP_PREFIX='$(pwd)/_build/pip_packages' \pip"
    export PYTHONPATH="$(pwd)/_build/pip_packages/lib/python3.8/site-packages:$PYTHONPATH"
    # export PYTHONPATH="$PYTHONPATH:$(pwd)"
    unset SOURCE_DATE_EPOCH
    # pip install -e .
    $0
  '';
}
endsnippet

snippet overlay
self: super:

{
  $1 = super.$1.override {
    $2
  };
}
endsnippet

snippet shell
with import <nixpkgs> {};

mkShell {
  buildInputs = [
    $0
  ];
}
endsnippet

snippet docker
with import <nixpkgs> {};

dockerTools.buildLayeredImage {
  name = "$1";
  contents = [ $2 ];
}
endsnippet

snippet  fhsenv
{pkgs ? import <nixpkgs> {}}:

with pkgs;
let fhs = buildFHSUserEnv rec {
  name = "$1";
  targetPkgs = pkgs: with pkgs; [
    gcc
    binutils
    gnumake
    which
    git
    glibc
    $2
  ];
  extraOutputsToInstall = ["dev"];
  profile = ''
    $3
  '';
};
in fhs.env
endsnippet
